{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Financial Crisis: Study A x Processing 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the Financial Crises dataset: characterize/describe the dataset and compare various classification models (e.g., Logistic regression, SVM, NN, classification trees/forests, ... ) in terms of their ability to correctly predict financial crises. Make sure to treat this as a real-time prediction problem: when predicting financial crises is a given year t, you can only use features from previous years t-s (with s>0), but no contemporaneous variables from the same year t. Compare the quality of your predictions using different criteria and validation methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "import seaborn as sns\n",
    "sns.set_style('whitegrid')\n",
    "from sklearn.model_selection import train_test_split, cross_val_predict, TimeSeriesSplit\n",
    "from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, BaggingClassifier, AdaBoostClassifier, GradientBoostingClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, r2_score, mean_squared_error, confusion_matrix\n",
    "from sklearn.metrics import precision_recall_curve, roc_curve, roc_auc_score, average_precision_score\n",
    "from math import sqrt\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.utils import resample\n",
    "from imblearn.over_sampling import SMOTE\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('FinancialCrises.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1867\n",
       "1      79\n",
       "Name: crisisST, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['crisisST'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['year', 'country', 'loans1', 'cpi', 'crisisST']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df.loc[df['country'] == 'DNK']\n",
    "df2 = df.loc[df['country'] == 'AUS']\n",
    "df3 = df.loc[df['country'] == 'JPN']\n",
    "df4 = df.loc[df['country'] == 'ESP']\n",
    "df5 = df.loc[df['country'] == 'GBR']\n",
    "df6 = df.loc[df['country'] == 'SWE']\n",
    "df7 = df.loc[df['country'] == 'FRA']\n",
    "df8 = df.loc[df['country'] == 'NOR']\n",
    "df9 = df.loc[df['country'] == 'USA']\n",
    "df10 = df.loc[df['country'] == 'ITA']\n",
    "df11 = df.loc[df['country'] == 'DEU']\n",
    "df12 = df.loc[df['country'] == 'CAN']\n",
    "df13 = df.loc[df['country'] == 'NLD']\n",
    "df14 = df.loc[df['country'] == 'CHE']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def df_process(df):\n",
    "    df = df.dropna()\n",
    "    df = df.sort_values(by=['country', 'year'])\n",
    "    df['credit_growth'] = np.log(df['loans1']).diff() - np.log(df['cpi']).diff()\n",
    "    df['CG_lag_1'] = df['credit_growth'].shift(1)\n",
    "    df['CG_lag_2'] = df['credit_growth'].shift(2)\n",
    "    df['CG_lag_3'] = df['credit_growth'].shift(3)\n",
    "    df['CG_lag_4'] = df['credit_growth'].shift(4)\n",
    "    df['CG_lag_5'] = df['credit_growth'].shift(5)\n",
    "    df = df[['year', 'country', 'crisisST', 'credit_growth', 'CG_lag_1', 'CG_lag_2', 'CG_lag_3', 'CG_lag_4', 'CG_lag_5']]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df_process(df1)\n",
    "df2 = df_process(df2)\n",
    "df3 = df_process(df3)\n",
    "df4 = df_process(df4)\n",
    "df5 = df_process(df5)\n",
    "df6 = df_process(df6)\n",
    "df7 = df_process(df7)\n",
    "df8 = df_process(df8)\n",
    "df9 = df_process(df9)\n",
    "df10 = df_process(df10)\n",
    "df11 = df_process(df11)\n",
    "df12 = df_process(df12)\n",
    "df13 = df_process(df13)\n",
    "df14 = df_process(df14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14])\n",
    "df = df.dropna()\n",
    "enc = LabelEncoder()\n",
    "df['country'] = enc.fit_transform(df['country'])\n",
    "df = df.sort_values(by=['year', 'country'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     123\n",
       "1     133\n",
       "2      97\n",
       "3     107\n",
       "4     113\n",
       "5      97\n",
       "6     107\n",
       "7     117\n",
       "8     129\n",
       "9     102\n",
       "10    103\n",
       "11    127\n",
       "12    132\n",
       "13    100\n",
       "Name: country, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.sort_values(by=['year', 'country'])\n",
    "df['country'].value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 3\n",
    "df = df.set_index(np.arange(len(df)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LogisticRegression(max_iter = 200, solver = 'newton-cg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.7363031914893617\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6548223350253808\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6069958847736626\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6938829787234042\n",
      "Confusion_Matrix 1\n",
      "[[328  48]\n",
      " [ 12   8]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6852791878172588\n",
      "Confusion_Matrix 2\n",
      "[[278 116]\n",
      " [  1   1]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6504997060552616\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = RandomForestClassifier(criterion = 'entropy', max_features = 'auto', min_samples_leaf = 2, min_samples_split = 2,\n",
    "                            n_estimators = 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6574468085106383\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.7525380710659898\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.634185773074662\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6877659574468086\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.699238578680203\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6702674897119341\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average precision-recall score: 0.13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_score = proba_sm[2]\n",
    "precision, recall, thresholds = precision_recall_curve(y_t[2], y_score)\n",
    "from sklearn.metrics import average_precision_score\n",
    "average_precision = average_precision_score(y_t[2], y_score)\n",
    "\n",
    "print('Average precision-recall score: {0:0.2f}'.format(\n",
    "      average_precision))\n",
    "from sklearn.utils.fixes import signature\n",
    "step_kwargs = ({'step': 'post'}\n",
    "               if 'step' in signature(plt.fill_between).parameters\n",
    "               else {})\n",
    "plt.figure(figsize=(15,15))\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.step(recall, precision, color='b', alpha=0.2,\n",
    "         where='post')\n",
    "plt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "          average_precision))\n",
    "plt.subplot(2,1,2)\n",
    "fpr, tpr, _ = roc_curve(y_t[2], y_score)\n",
    "auc_score = roc_auc_score(y_t[2], y_score)\n",
    "\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr, tpr)\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve: AUC Score = {0:0.2f}'.format(\n",
    "          auc_score))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extra-Trees Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = ExtraTreesClassifier(criterion = 'entropy', max_features = 'auto', min_samples_leaf = 2, min_samples_split = 2,\n",
    "                            n_estimators = 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6316489361702128\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6738578680203046\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6042034097589654\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6809840425531914\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.7157360406091371\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6175778953556732\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5364361702127659\n",
      "Confusion_Matrix 1\n",
      "[[347  29]\n",
      " [ 17   3]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4276649746192893\n",
      "Confusion_Matrix 2\n",
      "[[337  57]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5601063829787234\n",
      "Confusion_Matrix 1\n",
      "[[346  30]\n",
      " [ 16   4]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4936548223350254\n",
      "Confusion_Matrix 2\n",
      "[[389   5]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5198412698412699\n",
      "Confusion_Matrix 3\n",
      "[[372   6]\n",
      " [ 17   1]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### BaggingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = BaggingClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6123005319148935\n",
      "Confusion_Matrix 1\n",
      "[[374   2]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4181472081218274\n",
      "Confusion_Matrix 2\n",
      "[[393   1]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5390946502057613\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5305851063829786\n",
      "Confusion_Matrix 1\n",
      "[[374   2]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6040609137055838\n",
      "Confusion_Matrix 2\n",
      "[[392   2]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5458553791887125\n",
      "Confusion_Matrix 3\n",
      "[[376   2]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### AdaBoost Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = AdaBoostClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.636968085106383\n",
      "Confusion_Matrix 1\n",
      "[[370   6]\n",
      " [ 19   1]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.9441624365482233\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6604938271604938\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5507978723404255\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.8578680203045684\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6271310993533216\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = GradientBoostingClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6618351063829787\n",
      "Confusion_Matrix 1\n",
      "[[373   3]\n",
      " [ 19   1]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.883248730964467\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6158877131099353\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6760638297872339\n",
      "Confusion_Matrix 1\n",
      "[[372   4]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.8350253807106599\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6378600823045267\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### XGBoost Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = XGBClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6575797872340425\n",
      "Confusion_Matrix 1\n",
      "[[375   1]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.9098984771573604\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5895061728395061\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6450797872340426\n",
      "Confusion_Matrix 1\n",
      "[[375   1]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.8109137055837563\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6333039388594944\n",
      "Confusion_Matrix 3\n",
      "[[375   3]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNeighbors Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = KNeighborsClassifier(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5480053191489361\n",
      "Confusion_Matrix 1\n",
      "[[376   0]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4949238578680203\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.48544973544973546\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5449468085106383\n",
      "Confusion_Matrix 1\n",
      "[[366  10]\n",
      " [ 19   1]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4949238578680203\n",
      "Confusion_Matrix 2\n",
      "[[391   3]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5324074074074074\n",
      "Confusion_Matrix 3\n",
      "[[372   6]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6537234042553192\n",
      "Confusion_Matrix 1\n",
      "[[347  29]\n",
      " [ 19   1]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.40609137055837563\n",
      "Confusion_Matrix 2\n",
      "[[ 24 370]\n",
      " [  0   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.38065843621399176\n",
      "Confusion_Matrix 3\n",
      "[[ 10 368]\n",
      " [  0  18]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6542553191489361\n",
      "Confusion_Matrix 1\n",
      "[[366  10]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.38959390862944165\n",
      "Confusion_Matrix 2\n",
      "[[ 28 366]\n",
      " [  0   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.3606701940035274\n",
      "Confusion_Matrix 3\n",
      "[[ 15 363]\n",
      " [  0  18]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LinearDiscriminantAnalysis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6957446808510638\n",
      "Confusion_Matrix 1\n",
      "[[374   2]\n",
      " [ 18   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.3210659898477157\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.46119929453262787\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6849734042553193\n",
      "Confusion_Matrix 1\n",
      "[[292  84]\n",
      " [ 12   8]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.38578680203045684\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4676660787771899\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quadratic Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = QuadraticDiscriminantAnalysis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6824468085106383\n",
      "Confusion_Matrix 1\n",
      "[[365  11]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5571065989847716\n",
      "Confusion_Matrix 2\n",
      "[[ 36 358]\n",
      " [  0   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4645796590241035\n",
      "Confusion_Matrix 3\n",
      "[[ 38 340]\n",
      " [  3  15]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6809840425531916\n",
      "Confusion_Matrix 1\n",
      "[[371   5]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.5139593908629442\n",
      "Confusion_Matrix 2\n",
      "[[ 48 346]\n",
      " [  0   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.43944738389182836\n",
      "Confusion_Matrix 3\n",
      "[[ 74 304]\n",
      " [  5  13]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = svm.SVC(decision_function_shape='ovo', probability=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.2928191489361702\n",
      "Confusion_Matrix 1\n",
      "[[375   1]\n",
      " [ 20   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.33629441624365486\n",
      "Confusion_Matrix 2\n",
      "[[394   0]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4873603762492651\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.7788563829787234\n",
      "Confusion_Matrix 1\n",
      "[[365  11]\n",
      " [ 15   5]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.4441624365482233\n",
      "Confusion_Matrix 2\n",
      "[[388   6]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.49353321575543796\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SGD Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = SGDClassifier(loss = 'log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "AUC_LR_sm = []\n",
    "AUC_LR = []\n",
    "proba_sm = []\n",
    "proba = []\n",
    "y_t = []\n",
    "y = df['crisisST'].values\n",
    "X = df.drop(['crisisST'], axis=1).values\n",
    "scaler = StandardScaler()\n",
    "X  = scaler.fit_transform(X)\n",
    "sm = SMOTE(0.5,random_state=42)\n",
    "tscv = TimeSeriesSplit(n_splits=n)\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X[train_index], X[test_index]\n",
    "    y_train, y_test = y[train_index], y[test_index]\n",
    "    y_t.append(y_test)\n",
    "    X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n",
    "    clf.fit(X_train_sm, y_train_sm)\n",
    "    y_proba1 = clf.predict_proba(X_test)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_proba = clf.predict_proba(X_test)\n",
    "    AUC_LR.append(roc_auc_score(y_test, y_proba[:,1]))\n",
    "    proba.append(list(y_proba[:,1]))\n",
    "    AUC_LR_sm.append(roc_auc_score(y_test, y_proba1[:,1]))\n",
    "    proba_sm.append(list(y_proba1[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6873670212765957\n",
      "Confusion_Matrix 1\n",
      "[[325  51]\n",
      " [ 14   6]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.3870558375634518\n",
      "Confusion_Matrix 2\n",
      "[[329  65]\n",
      " [  2   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6362433862433862\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6331117021276595\n",
      "Confusion_Matrix 1\n",
      "[[270 106]\n",
      " [ 11   9]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.6345177664974619\n",
      "Confusion_Matrix 2\n",
      "[[164 230]\n",
      " [  0   2]]\n",
      "--------------------------------------------------------------------------------\n",
      "AUC Score: 0.73559670781893\n",
      "Confusion_Matrix 3\n",
      "[[378   0]\n",
      " [ 18   0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def conf_mat(prob, AUC):\n",
    "    for i in range(n):\n",
    "        y_pred = []\n",
    "        for j in range(len(prob[i])):\n",
    "            if prob[i][j]>0.5:\n",
    "                y_pred.append(1)\n",
    "            else: \n",
    "                y_pred.append(0)\n",
    "        print( \"-\"*80)\n",
    "        print('AUC Score:', AUC[i])\n",
    "        print('Confusion_Matrix', i+1)\n",
    "        print(confusion_matrix(y_t[i],y_pred))\n",
    "conf_mat(proba, AUC_LR), conf_mat(proba_sm, AUC_LR_sm)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
